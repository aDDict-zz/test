#!/usr/bin/perl

use DBI;

$dbh = DBI->connect('DBI:mysql:maxima:localhost:3306','root','bartok26') || die $DBI::errstr ; 
$dbh->{RaiseError} = 1;
$dbh->do("set names cp1250");

$sql="select ui_hazszam,ui_utca_nev,ui_vezeteknev,ui_keresztnev,id,ui_ir from users_permission where validated='yes' and robinson='no' and bounced='no'";
$sth = $dbh->prepare($sql);
$sth->execute;

print "$sql\n";

$i = 0;

$mfile="digest1";
open (OO,">$mfile");

my @ignore = ("DR\\.","IFJ\\.","ID\\.","OZV\\.","öZV\\.","ÖZV\\.");
while (@r = $sth->fetchrow_array) {
    $i++;
    if ($i/100 == int($i/100)) {
        print "$i\n";
    }
    $id = $r[4];
    $mc = mx_num($r[5]);
    for (@ignore) {
        $r[2] =~ s/^$_\s*//i;
    }
    $mc .= mx_wund_match($r[2],1," ");
    $mc .= mx_wund_match($r[2],2," ");
    $mc .= mx_wund_match($r[2],3," ");
    $mc .= mx_wund_match($r[2],4," ");
    $mc .= mx_num($r[0]);

    # 1-4. karakter: postai irányítószám 
    # 5-8. karakter: vezetéknév elso 4 karaktere
    # 	- a név nagybetus formára van átalakítva (pl. Nagy -> NAGY)
    # - a magyar (és egyéb, pl: ä) ékezetes magánhangzók az angol abc megfelelo  magánhangzóira vannak átalakítva (pl. Vágó -> VAGO, Käsemann -> KASE)
    # - amennyiben a vezetéknév rövidebb, mint 4 karakter, jobbról feltöltjük szóközökkel 
    # (space-el)  4 karakter hosszúságúra  (pl. "Gál" - > "GAL  ")
    # - a vezetéknév elotti "Dr.", "ifj.", "id.", "özv." ne szerepeljen a match-kódban
    # 9-12. karakter: a címben található elso, összefüggo numerikus karaktersorozat elso 4 karaktere, balról "0"-val (nullával) feltöltve. (pl. "Sólyom u. 3. B/25. 2/3." -> "0003")
     
    print OO "$mc,$id\n";
}

sub mx_num($) {

    $num=shift;
    $num=~s/[^0-9]//g;
    $lnl=length($num);
    if ($lnl<4) {
        for ($i=0;$i<4-$lnl;$i++) {
            $num="0$num";
        }
    }
    return substr($num,0,4);
}

sub mx_wund_match($;$;$) {

    my $str=shift;
    my $char=shift;
    my $stuff=shift;

    $str =~ s/Á/A/g;
    $str =~ s/Ä/A/g;
    $str =~ s/É/E/g;
    $str =~ s/Í/I/g;
    $str =~ s/Ó/O/g;
    $str =~ s/Ö/O/g;
    $str =~ s/Õ/O/g;
    $str =~ s/Ú/U/g;
    $str =~ s/Ü/U/g;
    $str =~ s/Û/U/g;
    $str =~ s/á/A/g;
    $str =~ s/ä/A/g;
    $str =~ s/é/E/g;
    $str =~ s/í/I/g;
    $str =~ s/ó/O/g;
    $str =~ s/ö/O/g;
    $str =~ s/õ/O/g;
    $str =~ s/ú/U/g;
    $str =~ s/ü/U/g;
    $str =~ s/û/U/g;
    $str = uc($str);
    
    return $stuff unless length($str);
    if ($char==-1) {
        $char=length($str);
    }
    if (length($str)<$char) {
        return $stuff;
    }
    $char--;
    return substr($str,$char,1);
}
