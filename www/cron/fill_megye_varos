#!/usr/bin/perl 

$_setchdir = $0;
$_setchdir =~ s/[^\/]*$//;
chdir($_setchdir);
require "./common.pl";

use DBI;
use POSIX qw(strftime);

$dbh = DBI->connect("DBI:mysql:$DB_NAME:$DB_AUTH_HOST:$DB_AUTH_PORT",$DB_AUTH_USER,$DB_AUTH_PW) || die $DBI::errstr ;
$dbh->{RaiseError} = 1;
$dbh->do("set names utf8");

# if group is given, updates only group; updates all otherwise.
$group=$ARGV[0];

# report email
$rep_send=1;
$rep_email="toth.tamas\@hirekmedia.hu";
#$rep_email="igor\@wap.hu";
@time = localtime;
$date = strftime("%d %b %Y %H:%M:%S", @time);
$rep_subject = "Megye-varos cron $date";
$rep_from="report\@maxima.hu";

#set to 2 to print logs to stdout, 1 to print logs to $verifyf dir, and 0 for no logs.
$VERIFY=1;             
$verifyf = "$MX_LOG_ROOT/megye_varos"; 

#verify those data which has changed in last $VERIFY_DAYS days only, set to 0
#to verify all the data. 1 or 2 is reasonable value, because this script is 
#intended to be a daily cron job.
$VERIFY_DAYS=2;

if ($VERIFY_DAYS) {
    $vdpart=" and unix_timestamp(now())-unix_timestamp(tstamp)<=$VERIFY_DAYS*86400";
    $rep_dtext="az utóbbi $VERIFY_DAYS nap új/megváltozott adatai";
}
else {
    $vdpart="";
    $rep_dtext="minden tag adatából";
}

$vtime=time();
if ($VERIFY==1) {
    open (OO, ">$verifyf/$vtime.notok");
    print OO "group: $group\n";
    close OO;
}
elsif ($VERIFY==2) {
    print "group: $group\n";
}

if (!length($group)) {
    $qpart="";
}
else {
    $qpart="where title='$group'";
}

$rep_testedgroups=0;
$rep_oletter=0;
$rep_kulfold=0;
$rep_ekezet=0;
$rep_novaros=0;
$rep_nomegye=0;
$rep_noteq_varos=0;
$rep_noteq_megye=0;
$rep_wrongir=0;
$rep_allok=0;
$rep_allusers=0;
$rep_nodata=0;

$foundg=0;
$sth=$dbh->prepare("select id,title from groups $qpart order by title");
$sth->execute;
while (@row=$sth->fetchrow_array) {
    $foundg=1;
    $group_id=$row[0];
    $title=$row[1];
    $st1 = $dbh->prepare("desc users_$title");
    $st1->execute;
    undef %realdemogs;
    while (@r1 = $st1->fetchrow_array) {
        if ($r1[0] =~ /ui_(.*)/) {
            $realdemogs{$1}=1;
        }
    }
    $st1->finish;
    if ($realdemogs{"ir"} && $realdemogs{"varos"} && $realdemogs{"megye"}) {
        log_mv("\n\nProcessing $title group ......");
        $i=0;
        $rep_testedgroups++;
        $st1=$dbh->prepare("update users_$title set ui_varos='Budapest' where 
                            ui_varos like 'bp' or ui_varos like 'bp.' or ui_varos like 'pest'");        
        $st1->execute;
        $st1->finish;
        $st1=$dbh->prepare("select id,ui_ir,ui_megye,ui_varos,ui_email from users_$title where 1 $vdpart");
        $st1->execute;
        while (@r1=$st1->fetchrow_array) {
            $user_id=$r1[0];
            $ui_ir=$r1[1];
            $megye=$r1[2];
            $varos=$r1[3];
            $email=$r1[4];
            $ir=$ui_ir;
            $ir =~ s/o/0/gi;
            unless ($ir eq $ui_ir) {
                $w="update users_$title set ui_ir='$ir' where ui_ir='$ui_ir'";
                $st2=$dbh->prepare($w);
                $st2->execute;
                $st2->finish;
                $rep_oletter++;
                log_mv("oletter: $ui_ir\n");
            }
            $vpart="";
            $mpart="";
            $comma="";
            $rep_megyeok=0;
            $rep_varosok=0;
            if (!length($ir) && !length($varos) && !length($megye)) {
                $rep_nodata++;
            }
            elsif ($email =~ /.+\.(ro|yu|ua|sk|hr|si)$/ || length($ir)>4) {
                if ($megye ne ",536,") {
                    $mpart="ui_megye=',536,'";
                    $vpart="ui_varos=''";
                    $rep_kulfold++;
                    log_mv("kulfold: $ui_ir : $varos : $megye\n");
                }
                else {
                    $rep_megyeok=1;
                    $rep_varosok=1;
                }
            }
            else {
                $db_varos="";
                $st2=$dbh->prepare("select telep.telepules from ir,telep
                                    where telep.id=ir.telep_id and ir.id='$ir'");
                $st2->execute;
                if (@r2=$st2->fetchrow_array) {
                    $db_varos=$r2[0];
                    $l_db_varos=lc($db_varos);
                    $l_varos=lc($varos);
                }
                $st2->finish;
                if (!length($db_varos)) {
                    $rep_wrongir++;
                    log_mv("wrongir: $ui_ir : $varos : $megye\n");
                }
                elsif (!length($varos)) {
                    $vpart="ui_varos='$db_varos'";
                    $rep_novaros++;
                    log_mv("novaros: $ui_ir : $varos : $megye\n");
                }
                elsif ($l_varos ne $l_db_varos) {
                    $l_varos=~s/[áÁ]/a/g;
                    $l_db_varos=~s/[áÁ]/a/g;
                    $l_varos=~s/[éÉ]/e/g;
                    $l_db_varos=~s/[éÉ]/e/g;
                    $l_varos=~s/[íÍ]/i/g;
                    $l_db_varos=~s/[íÍ]/i/g;
                    $l_varos=~s/[óÓöÖőŐ]/o/g;
                    $l_db_varos=~s/[óÓöÖőŐ]/o/g;
                    $l_varos=~s/[úÚüÜűŰ]/u/g;
                    $l_db_varos=~s/[úÚüÜűŰ]/u/g;
                    if ($l_db_varos eq $l_varos) {
                        $vpart="ui_varos='$db_varos'";
                        $rep_ekezet++;
                        log_mv("ekezet: $ui_ir : $varos : $megye\n");
                    }
                    else {
                        $st4=$dbh->prepare("select telepules from telep where ir='$ir'");
                        $st4->execute;
                        $foundoth=0;
                        while (@k4=$st4->fetchrow_array) {
                            $kistelep=$k4[0];
                            $foundoth=1 if (lc($kistelep) eq lc($varos));
                        }
                        $st4->finish;
                        if ($foundoth) {
                            $rep_varosok=1;
                        }
                        else {
                            $rep_noteq_varos++;
                            $vpart="ui_varos='$db_varos'";
                            log_mv("noteq_varos: $ui_ir : $varos : $megye\n");
                        }
                    }
                }
                else {
                    $rep_varosok=1;
                }
                
                $db_megye=-1;                
                $st2=$dbh->prepare("select megye.enum_id from ir,megye
                                    where megye.id=ir.megye_id and ir.id='$ir'");
                $st2->execute;
                if (@r2=$st2->fetchrow_array) {
                    $db_megye=$r2[0];
                }
                $st2->finish;
                if ($db_megye==-1) {
                    $rep_wrongir++ if (length($db_varos)); #if the varos is empty, ir error is already reported.
                    log_mv("wrongir: $ui_ir : $varos : $megye\n");
                }
                elsif (!length($megye)) {
                    $mpart="ui_megye=',$db_megye,'";
                    $rep_nomegye++;
                    log_mv("nomegye: $ui_ir : $varos : $megye\n");
                }
                elsif ($megye ne ",$db_megye,") {
                    $rep_noteq_megye++;
                    $mpart="ui_megye=',$db_megye,'";
                    log_mv("noteq_megye: $ui_ir : $varos : $megye\n");
                }
                else {
                    $rep_megyeok=1;
                }
            }
            if (length($vpart) && length($mpart)) {
                $comma=",";
            }
            $rep_allok++ if ($rep_megyeok && $rep_varosok);
            $rep_allusers++;
            if (length($vpart) || length($mpart)) {
                $q="update users_$title set $vpart$comma$mpart where id='$user_id'";
                #log_mv("\n$q");
                $st2=$dbh->prepare($q);
                $st2->execute;
                $st2->finish;
                $i++;
            }
        }
        $st1->finish;
        log_mv("\nReady with $title group, updated $i users");
    }
}
$sth->finish;

if (!$foundg) {
    log_mv("\n_fill_megye_varos updates ui_megye,ui_varos column of users_ tables.\n
             Usage: _fill_megye_varos updates for all groups\n
             _fill_megye_varos [group] updates only for given group\n");
}
else {
    $report="
Összesen $rep_testedgroups csoportnak van ir,varos,megye demog info-ja.
$rep_allusers tagból $rep_allok tag adatai voltak hibátlanok ($rep_dtext).
Hibák:
$rep_oletter esetben volt nulla helyett o betű az irányítószámban, automatikusan javítva
$rep_kulfold esetben az irányítószám több mint 4 számjegyű vagy az email cím (ro|yu|ua|sk|hr|si) végződésű, de a megye nem volt 'Külföld', automatikusan javítva
$rep_ekezet esetben volt ékezethiba a település nevében, automatikusan javítva
$rep_novaros esetben kitöltetlen volt a varos demog info, az irányítószám alapján automatikusan feltöltve
$rep_nomegye esetben kitöltetlen volt a megye demog info, az irányítószám alapján automatikusan feltöltve
$rep_noteq_varos esetben a varos demog info nem egyezett meg az irányítószámmal, automatikusan javítva
$rep_noteq_megye esetben a megye demog info nem egyezett meg az irányítószámmal, automatikusan javítva
$rep_wrongir esetben nemlétező irányítószámot adtak meg, javítás szükséges (admin/csoportok)
$rep_nodata esetben az ir,varos és a megye demog info is üres volt.
";

    if ($rep_send==1) {
        if (! open(SENDMAIL, "|/usr/lib/sendmail -oi -t -odb")) {
            warn "error invoking sendmail: $!\n";
        } 
        else {
      #      print "From: $rep_from\nTo: $rep_email\nSubject: $rep_subject\n\n$report\n";
            print SENDMAIL "From: $rep_from\nTo: $rep_email\nCc: tbjanos\@manufaktura.rs\nSubject: $rep_subject\n\n$report\n";
        }
    }
    log_mv($report);
}

$dbh->disconnect;

rename ("$verifyf/$vtime.notok","$verifyf/$vtime.ok");

sub log_mv($) {
    $ls_string=shift;
    if ($VERIFY==1) {
        open (OUT, ">>$verifyf/$vtime.notok");
        print OUT $ls_string;
        close OUT;
    }
    elsif ($VERIFY==2) {
        print $ls_string;
    }
}

